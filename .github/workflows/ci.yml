name: Infrastructure CI/CD Pipeline

# Deployment Logic:
# - GLOBAL environments: Deploy on main branch merges (shared infrastructure for all environments)
# - DEV environments: Deploy on main branch merges (development testing)
# - PROD environments: Deploy ONLY on release tags (manual production releases)

on:
  workflow_call:
    inputs:
      OUR_PROJECT_NAME:
        required: true
        type: string
      TEAM_NAME:
        required: true
        type: string
      TERRAFORM_VERSION:
        required: false
        type: string
        default: "1.6.0"
      ENVIRONMENT:
        required: true
        type: string
      WORKING_DIRECTORY:
        required: false
        type: string
        default: "."
      CHECKOV_SKIP_CHECKS:
        required: false
        type: string
        default: ""

jobs:
  assign_reviewers:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Add author as the assignee
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const pr_number = context.payload.pull_request.number;
          const pr_author = context.payload.pull_request.user.login;

          await github.rest.issues.addAssignees({
            owner: owner,
            repo: repo,
            issue_number: pr_number,
            assignees: [pr_author]
          });
    
    - name: Add reviewers
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ secrets.ACTION_API_TOKEN }}
      with:
        script: |
          const { execSync } = require('child_process');
          const repo = context.repo.repo;
          const pr_number = context.payload.pull_request.number;
          const pr_author = context.payload.pull_request.user.login;
          const token = process.env.GITHUB_TOKEN;
          
          try {
            const membersData = execSync(`curl --location "https://api.github.com/orgs/EightpointIO/teams/${{ inputs.TEAM_NAME }}/members" -H "Authorization: Bearer ${token}"`);
            const membersJSON = JSON.parse(membersData);
            const logins = membersJSON
              .map(member => JSON.stringify(member.login))
              .filter(login => login != JSON.stringify(pr_author) && login != "\"ios-devops\"");

            if (logins.length > 0) {
              execSync(`curl --location "https://api.github.com/repos/EightpointIO/${repo}/pulls/${pr_number}/requested_reviewers" -H "Authorization: Bearer ${token}" -d '{"reviewers":[${logins}]}'`);
              console.log(`‚úÖ Added ${logins.length} reviewers to PR #${pr_number}`);
            } else {
              console.log(`‚ÑπÔ∏è No additional reviewers to add for PR #${pr_number}`);
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Could not add reviewers: ${error.message}`);
          }

  notify_pr_on_slack:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
    steps:
    - name: Send notification to Slack
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INFRASTRUCTURE_PR_WEBHOOK_URL }}
      run: |
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_OWNER="${{ github.event.pull_request.user.login }}"

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"üèóÔ∏è <!here> <@${PR_OWNER}> opened Infrastructure PR for *${{ inputs.OUR_PROJECT_NAME }}* (${{ inputs.TEAM_NAME }}/${{ inputs.ENVIRONMENT }}): *<${PR_URL}|${PR_TITLE}>*\"
          }" $SLACK_WEBHOOK_URL
          
          echo "‚úÖ Slack notification sent"
        else
          echo "‚ÑπÔ∏è Slack webhook not configured, skipping notification"
        fi

  terraform_quality_checks:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/') }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      security-events: write
      actions: read
      repository-projects: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup workspace structure
        id: setup-workspace
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          
          # Handle special cases first
          if [[ "$REPO_NAME" == "mob-infrastructure-core" ]] || [[ "$REPO_NAME" == "mob-infrastructure-cicd" ]]; then
            echo "Infrastructure core repo - no restructuring needed"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse repository name: {team}-infra-{env}-{service-name}
          TEAM=$(echo "$REPO_NAME" | cut -d'-' -f1)
          INFRA_CHECK=$(echo "$REPO_NAME" | cut -d'-' -f2)  
          ENV=$(echo "$REPO_NAME" | cut -d'-' -f3)
          SERVICE=$(echo "$REPO_NAME" | cut -d'-' -f4-)
          
          # Validate expected pattern
          if [[ "$INFRA_CHECK" != "infra" ]]; then
            echo "‚ùå Repository name doesn't follow {team}-infra-{env}-{service} pattern: $REPO_NAME"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create proper structure
          TARGET_DIR="teams/${TEAM}/${ENV}/${SERVICE}"
          mkdir -p "$TARGET_DIR"
          
          echo "üìÅ Creating workspace structure for: $REPO_NAME"
          echo "   Team: $TEAM"
          echo "   Environment: $ENV" 
          echo "   Service: $SERVICE"
          echo "   Target: $TARGET_DIR"
          
          # Move all content (preserve .git directory)
          find . -maxdepth 1 -not -name '.' -not -name '.git' -not -name 'teams' -exec mv {} "$TARGET_DIR"/ \; 2>/dev/null || true
          
          echo "‚úÖ Restructured $REPO_NAME to: $TARGET_DIR"
          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
        
      - name: Configure Git for internal repos
        run: |
          git config --global url."https://${{ github.token }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          echo "https://${{ github.token }}@github.com" > ~/.git-credentials
          echo "Git configuration applied"
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ inputs.TEAM_NAME }}-${{ inputs.ENVIRONMENT }}-${{ inputs.OUR_PROJECT_NAME }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}
          
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        continue-on-error: true
        
      - name: Terraform Init
        id: init
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: terraform init
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        
      - name: Create reports directory
        run: mkdir -p reports
        
      - name: Security Scan with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ steps.setup-workspace.outputs.target_dir }}
          framework: terraform
          skip_check: CKV_TF_1,${{ inputs.CHECKOV_SKIP_CHECKS }}
          output_format: sarif
          output_file_path: reports/results.sarif
          soft_fail: true
          
      - name: Check SARIF file
        if: always()
        run: |
          if [ -f "reports/results.sarif" ]; then
            echo "‚úÖ SARIF file exists"
            ls -la reports/results.sarif
          else
            echo "‚ùå SARIF file not found"
            ls -la reports/ || echo "Reports directory doesn't exist"
          fi
          
      - name: Upload Security Results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: reports/results.sarif
          
      - name: Upload Security Results as Artifact
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('reports/results.sarif') != ''
        with:
          name: checkov-security-results
          path: reports/results.sarif
          retention-days: 21
          
      - name: Terraform Plan
        id: plan
        run: |
          echo "üîÑ Running terraform plan..."
          if terraform plan -no-color -out=tfplan > plan_output.txt 2>&1; then
            echo "‚úÖ Terraform plan completed successfully"
            echo "plan_result=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Terraform plan failed"
            echo "plan_result=failed" >> $GITHUB_OUTPUT
          fi
          echo "üìÑ Plan output:"
          cat plan_output.txt
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        continue-on-error: true
        
      - name: Comment PR with Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let planOutput = "Plan output not available";
            try {
              planOutput = fs.readFileSync(path.join('${{ steps.setup-workspace.outputs.target_dir }}', 'plan_output.txt'), 'utf8');
              // Truncate if too long for GitHub comment
              if (planOutput.length > 60000) {
                planOutput = planOutput.substring(0, 60000) + '\n\n... (output truncated)';
              }
            } catch (error) {
              planOutput = "Could not read plan output";
            }
            
            const output = `## üèóÔ∏è Terraform Results for ${{ inputs.OUR_PROJECT_NAME }} (${{ inputs.TEAM_NAME }}/${{ inputs.ENVIRONMENT }})
            
            #### Terraform Format üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Init ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validate ü§ñ \`${{ steps.validate.outcome }}\`
            #### Security Scan üîí \`${{ steps.checkov.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\` (${{ steps.plan.outputs.plan_result || 'unknown' }})
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${planOutput}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  check_if_merge:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    outputs:
      is_merge: ${{ steps.check.outputs.is_merge }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check if merge commit
        id: check
        run: |
          parents=$(git cat-file -p HEAD | grep '^parent ' | wc -l)
          commit_message=$(git log -1 --pretty=%B)
          
          # Check if it's a merge commit (multiple parents) OR a squash merge (contains PR reference)
          if [ $parents -gt 1 ]; then
            echo "is_merge=true" >> $GITHUB_OUTPUT
            echo "‚úÖ This is a merge commit - will proceed with deployment"
          elif echo "$commit_message" | grep -q "(#[0-9]\+)"; then
            echo "is_merge=true" >> $GITHUB_OUTPUT
            echo "‚úÖ This is a squash merge commit (contains PR reference) - will proceed with deployment"
          else
            echo "is_merge=false" >> $GITHUB_OUTPUT
            echo "‚ùå This is not a merge commit - skipping deployment"
            echo "Commit message: $commit_message"
          fi

  quality_gate:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/') }}
    needs: [terraform_quality_checks]
    steps:
      - name: Quality Gate Passed
        run: |
          echo "‚úÖ All infrastructure quality checks passed!"
          echo "üîÑ Deployment process can continue..."
      - name: Cancel workflow on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            const run_id = context.runId;
            const repo = context.repo;
            console.log('‚ùå Quality checks failed. Cancelling workflow...');
            await github.rest.actions.cancelWorkflowRun({
              owner: repo.owner,
              repo: repo.repo,
              run_id: run_id
            });

  deploy_to_dev:
    runs-on: ubuntu-latest
    if: ${{ needs.check_if_merge.outputs.is_merge == 'true' && inputs.ENVIRONMENT == 'dev' }}
    needs: [check_if_merge, quality_gate]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup workspace structure
        id: setup-workspace
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          
          # Handle special cases first
          if [[ "$REPO_NAME" == "mob-infrastructure-core" ]] || [[ "$REPO_NAME" == "mob-infrastructure-cicd" ]]; then
            echo "Infrastructure core repo - no restructuring needed"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse repository name: {team}-infra-{env}-{service-name}
          TEAM=$(echo "$REPO_NAME" | cut -d'-' -f1)
          INFRA_CHECK=$(echo "$REPO_NAME" | cut -d'-' -f2)  
          ENV=$(echo "$REPO_NAME" | cut -d'-' -f3)
          SERVICE=$(echo "$REPO_NAME" | cut -d'-' -f4-)
          
          # Validate expected pattern
          if [[ "$INFRA_CHECK" != "infra" ]]; then
            echo "‚ùå Repository name doesn't follow {team}-infra-{env}-{service} pattern: $REPO_NAME"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create proper structure
          TARGET_DIR="teams/${TEAM}/${ENV}/${SERVICE}"
          mkdir -p "$TARGET_DIR"
          
          echo "üìÅ Creating workspace structure for: $REPO_NAME"
          echo "   Team: $TEAM"
          echo "   Environment: $ENV" 
          echo "   Service: $SERVICE"
          echo "   Target: $TARGET_DIR"
          
          # Move all content (preserve .git directory)
          find . -maxdepth 1 -not -name '.' -not -name '.git' -not -name 'teams' -exec mv {} "$TARGET_DIR"/ \; 2>/dev/null || true
          
          echo "‚úÖ Restructured $REPO_NAME to: $TARGET_DIR"
          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
        
      - name: Configure Git for internal repos
        run: |
          git config --global url."https://${{ github.token }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          echo "https://${{ github.token }}@github.com" > ~/.git-credentials
          echo "Git configuration applied"
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ inputs.TEAM_NAME }}-${{ inputs.ENVIRONMENT }}-${{ inputs.OUR_PROJECT_NAME }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: terraform init
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        timeout-minutes: 30

  notify_dev_deployment:
    runs-on: ubuntu-latest
    if: ${{ needs.check_if_merge.outputs.is_merge == 'true' && inputs.ENVIRONMENT == 'dev' }}
    needs: [check_if_merge, deploy_to_dev]
    steps:
      - name: Send notification to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INFRASTRUCTURE_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            curl -X POST -H 'Content-type: application/json' --data "{
              \"username\": \"InfraBot\",
              \"icon_emoji\": \":construction:\",
              \"attachments\": [
                {
                  \"color\": \"#36a64f\",
                  \"title\": \"üèóÔ∏è DEVELOPMENT ${{ inputs.OUR_PROJECT_NAME }} Infrastructure Deployed\",
                  \"fields\": [
                    {\"title\": \"Team\", \"value\": \"${{ inputs.TEAM_NAME }}\", \"short\": true},
                    {\"title\": \"Environment\", \"value\": \"${{ inputs.ENVIRONMENT }}\", \"short\": true}
                  ],
                  \"text\": \"Commit: ${COMMIT_MESSAGE}\",
                  \"footer\": \"Eightpoint Infrastructure Pipeline | Author: ${{ github.actor }}\",
                  \"ts\": $(date +%s)
                }
              ]
            }" $SLACK_WEBHOOK_URL
            
            echo "‚úÖ Slack notification sent"
          else
            echo "‚ÑπÔ∏è Slack webhook not configured, skipping notification"
          fi

  deploy_to_global:
    runs-on: ubuntu-latest
    if: ${{ needs.check_if_merge.outputs.is_merge == 'true' && inputs.ENVIRONMENT == 'global' }}
    needs: [check_if_merge, quality_gate]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup workspace structure
        id: setup-workspace
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          
          # Handle special cases first
          if [[ "$REPO_NAME" == "mob-infrastructure-core" ]] || [[ "$REPO_NAME" == "mob-infrastructure-cicd" ]]; then
            echo "Infrastructure core repo - no restructuring needed"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse repository name: {team}-infra-{env}-{service-name}
          TEAM=$(echo "$REPO_NAME" | cut -d'-' -f1)
          INFRA_CHECK=$(echo "$REPO_NAME" | cut -d'-' -f2)  
          ENV=$(echo "$REPO_NAME" | cut -d'-' -f3)
          SERVICE=$(echo "$REPO_NAME" | cut -d'-' -f4-)
          
          # Validate expected pattern
          if [[ "$INFRA_CHECK" != "infra" ]]; then
            echo "‚ùå Repository name doesn't follow {team}-infra-{env}-{service} pattern: $REPO_NAME"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create proper structure
          TARGET_DIR="teams/${TEAM}/${ENV}/${SERVICE}"
          mkdir -p "$TARGET_DIR"
          
          echo "üìÅ Creating workspace structure for: $REPO_NAME"
          echo "   Team: $TEAM"
          echo "   Environment: $ENV" 
          echo "   Service: $SERVICE"
          echo "   Target: $TARGET_DIR"
          
          # Move all content (preserve .git directory)
          find . -maxdepth 1 -not -name '.' -not -name '.git' -not -name 'teams' -exec mv {} "$TARGET_DIR"/ \; 2>/dev/null || true
          
          echo "‚úÖ Restructured $REPO_NAME to: $TARGET_DIR"
          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
        
      - name: Configure Git for internal repos
        run: |
          git config --global url."https://${{ github.token }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          echo "https://${{ github.token }}@github.com" > ~/.git-credentials
          echo "Git configuration applied"
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ inputs.TEAM_NAME }}-${{ inputs.ENVIRONMENT }}-${{ inputs.OUR_PROJECT_NAME }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: terraform init
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        timeout-minutes: 30

  notify_global_deployment:
    runs-on: ubuntu-latest
    if: ${{ needs.check_if_merge.outputs.is_merge == 'true' && inputs.ENVIRONMENT == 'global' }}
    needs: [check_if_merge, deploy_to_global]
    steps:
      - name: Send notification to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INFRASTRUCTURE_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            curl -X POST -H 'Content-type: application/json' --data "{
              \"username\": \"InfraBot\",
              \"icon_emoji\": \":construction:\",
              \"attachments\": [
                {
                  \"color\": \"#36a64f\",
                  \"title\": \"üèóÔ∏è GLOBAL ${{ inputs.OUR_PROJECT_NAME }} Infrastructure Deployed\",
                  \"fields\": [
                    {\"title\": \"Team\", \"value\": \"${{ inputs.TEAM_NAME }}\", \"short\": true},
                    {\"title\": \"Environment\", \"value\": \"${{ inputs.ENVIRONMENT }}\", \"short\": true}
                  ],
                  \"text\": \"Commit: ${COMMIT_MESSAGE}\",
                  \"footer\": \"Eightpoint Infrastructure Pipeline | Author: ${{ github.actor }}\",
                  \"ts\": $(date +%s)
                }
              ]
            }" $SLACK_WEBHOOK_URL
            
            echo "‚úÖ Slack notification sent"
          else
            echo "‚ÑπÔ∏è Slack webhook not configured, skipping notification"
          fi

  deploy_to_prod:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && inputs.ENVIRONMENT == 'prod' }}
    needs: [quality_gate]
    # environment: production  # TODO: Set up GitHub environment for production approvals
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup workspace structure
        id: setup-workspace
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          
          # Handle special cases first
          if [[ "$REPO_NAME" == "mob-infrastructure-core" ]] || [[ "$REPO_NAME" == "mob-infrastructure-cicd" ]]; then
            echo "Infrastructure core repo - no restructuring needed"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse repository name: {team}-infra-{env}-{service-name}
          TEAM=$(echo "$REPO_NAME" | cut -d'-' -f1)
          INFRA_CHECK=$(echo "$REPO_NAME" | cut -d'-' -f2)  
          ENV=$(echo "$REPO_NAME" | cut -d'-' -f3)
          SERVICE=$(echo "$REPO_NAME" | cut -d'-' -f4-)
          
          # Validate expected pattern
          if [[ "$INFRA_CHECK" != "infra" ]]; then
            echo "‚ùå Repository name doesn't follow {team}-infra-{env}-{service} pattern: $REPO_NAME"
            echo "target_dir=." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create proper structure
          TARGET_DIR="teams/${TEAM}/${ENV}/${SERVICE}"
          mkdir -p "$TARGET_DIR"
          
          echo "üìÅ Creating workspace structure for: $REPO_NAME"
          echo "   Team: $TEAM"
          echo "   Environment: $ENV" 
          echo "   Service: $SERVICE"
          echo "   Target: $TARGET_DIR"
          
          # Move all content (preserve .git directory)
          find . -maxdepth 1 -not -name '.' -not -name '.git' -not -name 'teams' -exec mv {} "$TARGET_DIR"/ \; 2>/dev/null || true
          
          echo "‚úÖ Restructured $REPO_NAME to: $TARGET_DIR"
          echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
        
      - name: Configure Git for internal repos
        run: |
          git config --global url."https://${{ github.token }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          echo "https://${{ github.token }}@github.com" > ~/.git-credentials
          echo "Git configuration applied"
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ inputs.TEAM_NAME }}-${{ inputs.ENVIRONMENT }}-${{ inputs.OUR_PROJECT_NAME }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: terraform init
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}
        
      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: ${{ steps.setup-workspace.outputs.target_dir }}

  notify_prod_deployment:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && inputs.ENVIRONMENT == 'prod' }}
    needs: [deploy_to_prod]
    steps:
      - name: Send notification to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INFRASTRUCTURE_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            curl -X POST -H 'Content-type: application/json' --data "{
              \"username\": \"InfraBot\",
              \"icon_emoji\": \":rocket:\",
              \"attachments\": [
                {
                  \"color\": \"#ff6b6b\",
                  \"title\": \"üöÄ PRODUCTION ${{ inputs.OUR_PROJECT_NAME }} Infrastructure Deployed\",
                  \"fields\": [
                    {\"title\": \"Team\", \"value\": \"${{ inputs.TEAM_NAME }}\", \"short\": true},
                    {\"title\": \"Environment\", \"value\": \"${{ inputs.ENVIRONMENT }}\", \"short\": true},
                    {\"title\": \"Version\", \"value\": \"${TAG_NAME}\", \"short\": true}
                  ],
                  \"footer\": \"Eightpoint Infrastructure Pipeline | Author: ${{ github.actor }}\",
                  \"ts\": $(date +%s)
                }
              ]
            }" $SLACK_WEBHOOK_URL
            
            echo "‚úÖ Slack notification sent"
          else
            echo "‚ÑπÔ∏è Slack webhook not configured, skipping notification"
          fi